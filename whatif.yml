---
name: "e2e-deploy"

on:

  #
  # Push
  # Automated workflow trigger when a merge
  # commit enters the main branch.
  #

  pull_request:
    types: [opened, reopened]
      
#
# Permissions required for the pipeline to interact with repo and federated credentials
#

permissions:
    id-token: write
    contents: write
    pull-requests: write
    
env:

  #
  # Credentials
  #

  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_ENVIRONMENT: ${{ secrets.ARM_ENVIRONMENT }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  #
  # modulesFolder
  # To enable caching of PowerShell modules between
  # runs, the modules are stored in a modules folder
  # that can be cached.
  #
  
  modulesFolder: "~/.local/share/powershell/Modules"

jobs:

  push:

    name: "Push"
    runs-on: ubuntu-20.04

    #
    # Environment if using Federated Credentials 
    # https://github.com/azure/azops/wiki/github-oidc
    #

    environment: alpha

    steps:

      #
      # Checkout
      # Checks-out the repository
      #

      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Connect"
        shell: pwsh
        run: |
          $Env:PSModulePath = $Env:PSModulePath, '${{ env.modulesFolder }}' -join [IO.Path]::PathSeparator
          $azParams = @{
            SubscriptionId  = '${{env.ARM_SUBSCRIPTION_ID}}'
            TenantId        = '${{env.ARM_TENANT_ID}}'
          }
          if ('${{env.ARM_ENVIRONMENT}}' -in (Get-AzEnvironment).Name) {
            $azParams.Environment = '${{env.ARM_ENVIRONMENT}}'
          }
          # Use Service Principal if ARM_CLIENT_ID is set
          if ('${{env.ARM_CLIENT_ID}}') {
            # Use federated credentials if token and no secret exists
            if ($ENV:ACTIONS_ID_TOKEN_REQUEST_TOKEN -and -not '${{env.ARM_CLIENT_SECRET}}') {
              $url = "{0}&audience=api://AzureADTokenExchange" -f $ENV:ACTIONS_ID_TOKEN_REQUEST_URL
              $federatedJwt = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $ENV:ACTIONS_ID_TOKEN_REQUEST_TOKEN"}
              $azParams.ApplicationId = '${{env.ARM_CLIENT_ID}}'
              $azParams.FederatedToken = [System.Net.WebUtility]::UrlEncode($federatedJwt.Value)
            } else {
              $azParams.Credential = (New-Object PSCredential -ArgumentList '${{env.ARM_CLIENT_ID}}', (ConvertTo-SecureString -String '${{env.ARM_CLIENT_SECRET}}' -AsPlainText -Force))  
            }
            Connect-AzAccount -ServicePrincipal @azParams
          } else {
            # Connect with Managed Identity
            Connect-AzAccount -Identity @azParams
          }

   
      #
      # Deploy
      # Deploy any templates changed in the last commit
      #
     
      - name: 'Deploy'
        shell: pwsh
        run: |
          Get-AzContext | fl
        
